// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: entry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_entry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_entry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_entry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_entry_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_entry_2eproto;
namespace proto {
class EntryItem;
struct EntryItemDefaultTypeInternal;
extern EntryItemDefaultTypeInternal _EntryItem_default_instance_;
class Entrys;
struct EntrysDefaultTypeInternal;
extern EntrysDefaultTypeInternal _Entrys_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::EntryItem* Arena::CreateMaybeMessage<::proto::EntryItem>(Arena*);
template<> ::proto::Entrys* Arena::CreateMaybeMessage<::proto::Entrys>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class EntryItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.EntryItem) */ {
 public:
  inline EntryItem() : EntryItem(nullptr) {}
  ~EntryItem() override;
  explicit PROTOBUF_CONSTEXPR EntryItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EntryItem(const EntryItem& from);
  EntryItem(EntryItem&& from) noexcept
    : EntryItem() {
    *this = ::std::move(from);
  }

  inline EntryItem& operator=(const EntryItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntryItem& operator=(EntryItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EntryItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const EntryItem* internal_default_instance() {
    return reinterpret_cast<const EntryItem*>(
               &_EntryItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EntryItem& a, EntryItem& b) {
    a.Swap(&b);
  }
  inline void Swap(EntryItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntryItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EntryItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EntryItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EntryItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EntryItem& from) {
    EntryItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntryItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.EntryItem";
  }
  protected:
  explicit EntryItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 3,
    kSharedLinkFieldNumber = 4,
    kSizeFieldNumber = 1,
    kIsDirFieldNumber = 2,
  };
  // string path = 3;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string shared_link = 4;
  void clear_shared_link();
  const std::string& shared_link() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shared_link(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shared_link();
  PROTOBUF_NODISCARD std::string* release_shared_link();
  void set_allocated_shared_link(std::string* shared_link);
  private:
  const std::string& _internal_shared_link() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shared_link(const std::string& value);
  std::string* _internal_mutable_shared_link();
  public:

  // uint64 size = 1;
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // bool is_dir = 2;
  void clear_is_dir();
  bool is_dir() const;
  void set_is_dir(bool value);
  private:
  bool _internal_is_dir() const;
  void _internal_set_is_dir(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.EntryItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shared_link_;
    uint64_t size_;
    bool is_dir_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_entry_2eproto;
};
// -------------------------------------------------------------------

class Entrys final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Entrys) */ {
 public:
  inline Entrys() : Entrys(nullptr) {}
  ~Entrys() override;
  explicit PROTOBUF_CONSTEXPR Entrys(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Entrys(const Entrys& from);
  Entrys(Entrys&& from) noexcept
    : Entrys() {
    *this = ::std::move(from);
  }

  inline Entrys& operator=(const Entrys& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entrys& operator=(Entrys&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Entrys& default_instance() {
    return *internal_default_instance();
  }
  static inline const Entrys* internal_default_instance() {
    return reinterpret_cast<const Entrys*>(
               &_Entrys_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Entrys& a, Entrys& b) {
    a.Swap(&b);
  }
  inline void Swap(Entrys* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Entrys* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Entrys* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Entrys>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Entrys& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Entrys& from) {
    Entrys::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entrys* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Entrys";
  }
  protected:
  explicit Entrys(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntrysFieldNumber = 1,
  };
  // repeated .proto.EntryItem entrys = 1;
  int entrys_size() const;
  private:
  int _internal_entrys_size() const;
  public:
  void clear_entrys();
  ::proto::EntryItem* mutable_entrys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::EntryItem >*
      mutable_entrys();
  private:
  const ::proto::EntryItem& _internal_entrys(int index) const;
  ::proto::EntryItem* _internal_add_entrys();
  public:
  const ::proto::EntryItem& entrys(int index) const;
  ::proto::EntryItem* add_entrys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::EntryItem >&
      entrys() const;

  // @@protoc_insertion_point(class_scope:proto.Entrys)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::EntryItem > entrys_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_entry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EntryItem

// uint64 size = 1;
inline void EntryItem::clear_size() {
  _impl_.size_ = uint64_t{0u};
}
inline uint64_t EntryItem::_internal_size() const {
  return _impl_.size_;
}
inline uint64_t EntryItem::size() const {
  // @@protoc_insertion_point(field_get:proto.EntryItem.size)
  return _internal_size();
}
inline void EntryItem::_internal_set_size(uint64_t value) {
  
  _impl_.size_ = value;
}
inline void EntryItem::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:proto.EntryItem.size)
}

// bool is_dir = 2;
inline void EntryItem::clear_is_dir() {
  _impl_.is_dir_ = false;
}
inline bool EntryItem::_internal_is_dir() const {
  return _impl_.is_dir_;
}
inline bool EntryItem::is_dir() const {
  // @@protoc_insertion_point(field_get:proto.EntryItem.is_dir)
  return _internal_is_dir();
}
inline void EntryItem::_internal_set_is_dir(bool value) {
  
  _impl_.is_dir_ = value;
}
inline void EntryItem::set_is_dir(bool value) {
  _internal_set_is_dir(value);
  // @@protoc_insertion_point(field_set:proto.EntryItem.is_dir)
}

// string path = 3;
inline void EntryItem::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& EntryItem::path() const {
  // @@protoc_insertion_point(field_get:proto.EntryItem.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EntryItem::set_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.EntryItem.path)
}
inline std::string* EntryItem::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:proto.EntryItem.path)
  return _s;
}
inline const std::string& EntryItem::_internal_path() const {
  return _impl_.path_.Get();
}
inline void EntryItem::_internal_set_path(const std::string& value) {
  
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* EntryItem::_internal_mutable_path() {
  
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* EntryItem::release_path() {
  // @@protoc_insertion_point(field_release:proto.EntryItem.path)
  return _impl_.path_.Release();
}
inline void EntryItem::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.EntryItem.path)
}

// string shared_link = 4;
inline void EntryItem::clear_shared_link() {
  _impl_.shared_link_.ClearToEmpty();
}
inline const std::string& EntryItem::shared_link() const {
  // @@protoc_insertion_point(field_get:proto.EntryItem.shared_link)
  return _internal_shared_link();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EntryItem::set_shared_link(ArgT0&& arg0, ArgT... args) {
 
 _impl_.shared_link_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.EntryItem.shared_link)
}
inline std::string* EntryItem::mutable_shared_link() {
  std::string* _s = _internal_mutable_shared_link();
  // @@protoc_insertion_point(field_mutable:proto.EntryItem.shared_link)
  return _s;
}
inline const std::string& EntryItem::_internal_shared_link() const {
  return _impl_.shared_link_.Get();
}
inline void EntryItem::_internal_set_shared_link(const std::string& value) {
  
  _impl_.shared_link_.Set(value, GetArenaForAllocation());
}
inline std::string* EntryItem::_internal_mutable_shared_link() {
  
  return _impl_.shared_link_.Mutable(GetArenaForAllocation());
}
inline std::string* EntryItem::release_shared_link() {
  // @@protoc_insertion_point(field_release:proto.EntryItem.shared_link)
  return _impl_.shared_link_.Release();
}
inline void EntryItem::set_allocated_shared_link(std::string* shared_link) {
  if (shared_link != nullptr) {
    
  } else {
    
  }
  _impl_.shared_link_.SetAllocated(shared_link, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.shared_link_.IsDefault()) {
    _impl_.shared_link_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.EntryItem.shared_link)
}

// -------------------------------------------------------------------

// Entrys

// repeated .proto.EntryItem entrys = 1;
inline int Entrys::_internal_entrys_size() const {
  return _impl_.entrys_.size();
}
inline int Entrys::entrys_size() const {
  return _internal_entrys_size();
}
inline void Entrys::clear_entrys() {
  _impl_.entrys_.Clear();
}
inline ::proto::EntryItem* Entrys::mutable_entrys(int index) {
  // @@protoc_insertion_point(field_mutable:proto.Entrys.entrys)
  return _impl_.entrys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::EntryItem >*
Entrys::mutable_entrys() {
  // @@protoc_insertion_point(field_mutable_list:proto.Entrys.entrys)
  return &_impl_.entrys_;
}
inline const ::proto::EntryItem& Entrys::_internal_entrys(int index) const {
  return _impl_.entrys_.Get(index);
}
inline const ::proto::EntryItem& Entrys::entrys(int index) const {
  // @@protoc_insertion_point(field_get:proto.Entrys.entrys)
  return _internal_entrys(index);
}
inline ::proto::EntryItem* Entrys::_internal_add_entrys() {
  return _impl_.entrys_.Add();
}
inline ::proto::EntryItem* Entrys::add_entrys() {
  ::proto::EntryItem* _add = _internal_add_entrys();
  // @@protoc_insertion_point(field_add:proto.Entrys.entrys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::EntryItem >&
Entrys::entrys() const {
  // @@protoc_insertion_point(field_list:proto.Entrys.entrys)
  return _impl_.entrys_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_entry_2eproto
